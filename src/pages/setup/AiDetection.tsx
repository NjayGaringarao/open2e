import InputBox from "@/components/InputBox";
import StepContainer from "@/components/setup/StepContainer";
import { useSetupNavigation } from "@/context/setup/navigation";
import { useSetupProcedure } from "@/context/setup/procedure";
import { useEffect, useState } from "react";
import clsx from "clsx";
import icon from "@/constant/icon";
import { Loading } from "@/components/Loading";
import { Check, X } from "lucide-react";
import Markdown from "@/components/Markdown";
import { validateApiKey } from "@/lib/sapling/api";

const AiDetection = () => {
  const { navigate, step, totalSteps } = useSetupNavigation();
  const { saplingApiKey, setSaplingApiKey } = useSetupProcedure();
  const [verifying, setVerifying] = useState(false);
  const [isApiValid, setIsApiValid] = useState(false);
  const [prompt, setPrompt] = useState<string>();

  const validate = async (apiKey: string) => {
    try {
      setVerifying(true);

      if (!saplingApiKey.length) {
        setPrompt(undefined);
        return;
      }

      const { error } = await validateApiKey(apiKey);

      setIsApiValid(!error);

      setPrompt(
        error
          ? "Incorrect API key provided or no internet connection. You can find your API key [here](https://sapling.ai/api_settings?utm_source=sapling.ai&utm_medium=documentation&utm_campaign=apidocs)."
          : "Validation Success: API Key is Valid."
      );
    } catch (error) {
      setIsApiValid(false);
      setPrompt(
        "Incorrect API key provided or no internet connection. You can find your API key at [here](https://sapling.ai/api_settings?utm_source=sapling.ai&utm_medium=documentation&utm_campaign=apidocs)."
      );
    } finally {
      setVerifying(false);
    }
  };

  useEffect(() => {
    // DEBOUNCE
    const timeout = setTimeout(() => {
      validate(saplingApiKey);
    }, 600);
    return () => clearTimeout(timeout);
  }, [saplingApiKey]);

  return (
    <StepContainer
      step={step}
      totalSteps={totalSteps}
      onNext={navigate.next}
      onBack={navigate.back}
      disabledNext={!isApiValid && !!saplingApiKey.length}
      nextLabel={!!saplingApiKey.length ? "Next" : "Skip"}
    >
      <div className="">
        <h1 className="text-5xl font-semibold text-primary">AI Detection</h1>
        <p className="text-uGrayLight text-lg mt-4">
          Check if the answer was generated by AI. This feature requires an
          active internet connection.
        </p>
      </div>

      <div
        className={clsx(
          "p-4 rounded-md bg-panel",
          "flex flex-row gap-4 items-center"
        )}
      >
        <div className="h-full">
          <img
            src={icon.sapling}
            alt="openai"
            className="h-12 w-auto bg-white p-1 rounded-md"
          />
        </div>
        <div className="flex-1">
          <p className="text-xl font-medium text-uGray">Sapling AI</p>
          <p className="text-base text-uGrayLight">
            If no API key is provided, the system will default to the free tier,
            which has strict usage limits and may stop working once the quota is
            exceeded.
          </p>

          <div
            className={clsx(
              "flex-1 flex flex-col justify-center",
              "mt-4 gap-2"
            )}
          >
            <InputBox
              id="api-key"
              isPassword
              value={saplingApiKey}
              setValue={setSaplingApiKey}
              placeholder="Paste your api key here..."
              inputClassName={clsx(
                "py-1 px-3 w-full",
                "border border-panel",
                "text-base font-mono"
              )}
            />

            {prompt && (
              <div className="flex flex-row gap-2 text-xs text-uGrayLight items-center">
                {verifying ? (
                  <Loading size="small" />
                ) : isApiValid ? (
                  <Check className="h-8 w-8 text-uGray" />
                ) : (
                  <X className="h-8 w-8 text-uRed" />
                )}
                <div className="font-mono">
                  <Markdown text={prompt} />
                </div>
              </div>
            )}
          </div>
        </div>
        <div className="px-4 items-center flex flex-col">
          <p className="text-xl font-mono text-uGrayLight">P300.00</p>
          <p className="text-xs font-mono text-uGrayLight -mt-1">per 1M char</p>
        </div>
      </div>
    </StepContainer>
  );
};

export default AiDetection;
